// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quotes.sql

package querier

import (
	"context"
)

const createQuote = `-- name: CreateQuote :one
INSERT INTO quotes (carrier_name, service, price, deadline)
VALUES ($1, $2, $3, $4)
RETURNING id, carrier_name, service, price, deadline, created_at, updated_at
`

type CreateQuoteParams struct {
	CarrierName string
	Service     string
	Price       float64
	Deadline    int
}

func (q *Queries) CreateQuote(ctx context.Context, arg CreateQuoteParams) (Quote, error) {
	row := q.db.QueryRow(ctx, createQuote,
		arg.CarrierName,
		arg.Service,
		arg.Price,
		arg.Deadline,
	)
	var i Quote
	err := row.Scan(
		&i.ID,
		&i.CarrierName,
		&i.Service,
		&i.Price,
		&i.Deadline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findLastQuotes = `-- name: FindLastQuotes :many
SELECT id, carrier_name, service, price, deadline, created_at, updated_at FROM quotes
ORDER BY created_at DESC
LIMIT $1::int
`

func (q *Queries) FindLastQuotes(ctx context.Context, limitquotes int) ([]Quote, error) {
	rows, err := q.db.Query(ctx, findLastQuotes, limitquotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quote
	for rows.Next() {
		var i Quote
		if err := rows.Scan(
			&i.ID,
			&i.CarrierName,
			&i.Service,
			&i.Price,
			&i.Deadline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
